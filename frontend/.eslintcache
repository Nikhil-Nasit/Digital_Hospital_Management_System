[{"D:\\project_work\\frontend\\src\\index.js":"1","D:\\project_work\\frontend\\src\\App.js":"2","D:\\project_work\\frontend\\src\\pages\\HomePage.js":"3","D:\\project_work\\frontend\\src\\components\\Layout\\Layout.js":"4","D:\\project_work\\frontend\\src\\components\\Profile\\UserProfile.js":"5","D:\\project_work\\frontend\\src\\components\\StartingPage\\StartingPageContent.js":"6","D:\\project_work\\frontend\\src\\components\\Layout\\MainNavigation.js":"7","D:\\project_work\\frontend\\src\\components\\Profile\\ProfileForm.js":"8","D:\\project_work\\frontend\\src\\components\\UI\\Slider.js":"9","D:\\project_work\\frontend\\src\\components\\UI\\DataSlider.js":"10","D:\\project_work\\frontend\\src\\store\\auth-context.js":"11","D:\\project_work\\frontend\\src\\pages\\AdminPage.js":"12","D:\\project_work\\frontend\\src\\pages\\PatientPage.js":"13","D:\\project_work\\frontend\\src\\components\\Auth\\PatientForm.js":"14","D:\\project_work\\frontend\\src\\pages\\DoctorPage.js":"15","D:\\project_work\\frontend\\src\\components\\Auth\\DoctorForm.js":"16","D:\\project_work\\frontend\\src\\components\\Auth\\AdminForm.js":"17","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminHomePage.js":"18","D:\\project_work\\frontend\\src\\components\\Admin\\AdminHomePageForm.js":"19","D:\\project_work\\frontend\\src\\components\\Layout\\Dummy.js":"20","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js":"21","D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageDoctorForm.js":"22","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageStaffPage.js":"23","D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageStaffForm.js":"24","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js":"25","D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js":"26","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js":"27","D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js":"28"},{"size":346,"mtime":1643380325681,"results":"29","hashOfConfig":"30"},{"size":1806,"mtime":1643526387914,"results":"31","hashOfConfig":"30"},{"size":260,"mtime":1643469945876,"results":"32","hashOfConfig":"30"},{"size":246,"mtime":1643466654602,"results":"33","hashOfConfig":"30"},{"size":284,"mtime":1643428810689,"results":"34","hashOfConfig":"30"},{"size":302,"mtime":1643341996580,"results":"35","hashOfConfig":"30"},{"size":1635,"mtime":1643471323546,"results":"36","hashOfConfig":"30"},{"size":533,"mtime":1643378828277,"results":"37","hashOfConfig":"30"},{"size":1283,"mtime":1643341302987,"results":"38","hashOfConfig":"30"},{"size":2409,"mtime":1643341292061,"results":"39","hashOfConfig":"30"},{"size":721,"mtime":1643392254826,"results":"40","hashOfConfig":"30"},{"size":224,"mtime":1643480382711,"results":"41","hashOfConfig":"30"},{"size":246,"mtime":1643469882060,"results":"42","hashOfConfig":"30"},{"size":14165,"mtime":1643461170965,"results":"43","hashOfConfig":"30"},{"size":241,"mtime":1643469917984,"results":"44","hashOfConfig":"30"},{"size":6631,"mtime":1643472725717,"results":"45","hashOfConfig":"30"},{"size":6590,"mtime":1643524450202,"results":"46","hashOfConfig":"30"},{"size":283,"mtime":1643524797889,"results":"47","hashOfConfig":"30"},{"size":651,"mtime":1643526414350,"results":"48","hashOfConfig":"30"},{"size":125,"mtime":1643466570962,"results":"49","hashOfConfig":"30"},{"size":256,"mtime":1643471923864,"results":"50","hashOfConfig":"30"},{"size":14203,"mtime":1643616081535,"results":"51","hashOfConfig":"30"},{"size":249,"mtime":1643476104370,"results":"52","hashOfConfig":"30"},{"size":12666,"mtime":1643562138545,"results":"53","hashOfConfig":"30"},{"size":256,"mtime":1643526034990,"results":"54","hashOfConfig":"30"},{"size":5241,"mtime":1643563229088,"results":"55","hashOfConfig":"30"},{"size":252,"mtime":1643526068369,"results":"56","hashOfConfig":"30"},{"size":5216,"mtime":1643563373466,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"qn2svh",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"60"},"D:\\project_work\\frontend\\src\\index.js",[],["122","123"],"D:\\project_work\\frontend\\src\\App.js",["124","125"],"import { Switch, Route } from \"react-router-dom\";\nimport React from \"react\";\nimport Layout from \"./components/Layout/Layout\";\nimport UserProfile from \"./components/Profile/UserProfile\";\nimport AdminPage from \"./pages/AdminPage\";\nimport PatientPage from \"./pages/PatientPage\";\nimport DoctorPage from \"./pages/DoctorPage\";\nimport HomePage from \"./pages/HomePage\";\nimport AdminHomePage from \"./pages/Admin/AdminHomePage\";\nimport Dummy from \"./components/Layout/Dummy\";\nimport AdminManageDoctorPage from \"./pages/Admin/AdminManageDoctorPage\";\nimport AdminDeleteDoctorPage from \"./pages/Admin/AdminDeleteDoctorPage\";\nimport AdminManageStaffPage from \"./pages/Admin/AdminManageStaffPage\";\nimport AdminDeleteStaffPage from \"./pages/Admin/AdminDeleteStaffPage\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Switch>\n        \n          <Route path=\"/\" exact>\n            <HomePage />\n          </Route>\n          <Route path=\"/admin/login\">\n            <AdminPage />\n          </Route>\n\n          <Route path=\"/admin/home\">\n            <AdminHomePage />\n          </Route>\n          <Route path=\"/admin/add-doctor\">\n            <AdminManageDoctorPage />\n          </Route>\n          <Route path=\"/admin/delete-doctor\">\n            <AdminDeleteDoctorPage />\n          </Route>\n          <Route path=\"/admin/add-staff\">\n            <AdminManageStaffPage />\n          </Route>\n          <Route path=\"/admin/delete-staff\">\n            <AdminDeleteStaffPage />\n          </Route>\n\n          <Route path=\"/patient/login\">\n            <PatientPage />\n          </Route>\n          <Route path=\"/doctor/login\">\n            <DoctorPage />\n          </Route>\n          <Route path=\"/profile\">\n            <UserProfile />\n          </Route>\n        \n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","D:\\project_work\\frontend\\src\\pages\\HomePage.js",[],"D:\\project_work\\frontend\\src\\components\\Layout\\Layout.js",[],"D:\\project_work\\frontend\\src\\components\\Profile\\UserProfile.js",[],"D:\\project_work\\frontend\\src\\components\\StartingPage\\StartingPageContent.js",[],"D:\\project_work\\frontend\\src\\components\\Layout\\MainNavigation.js",[],"D:\\project_work\\frontend\\src\\components\\Profile\\ProfileForm.js",[],["126","127"],"D:\\project_work\\frontend\\src\\components\\UI\\Slider.js",[],"D:\\project_work\\frontend\\src\\components\\UI\\DataSlider.js",[],"D:\\project_work\\frontend\\src\\store\\auth-context.js",[],"D:\\project_work\\frontend\\src\\pages\\AdminPage.js",[],"D:\\project_work\\frontend\\src\\pages\\PatientPage.js",[],"D:\\project_work\\frontend\\src\\components\\Auth\\PatientForm.js",[],"D:\\project_work\\frontend\\src\\pages\\DoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Auth\\DoctorForm.js",["128","129","130","131"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./AuthForm.module.css\";\r\n\r\nconst DoctorForm = () => {\r\n  // const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n\r\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\r\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\r\n    useState(false);\r\n\r\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\r\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\r\n    useState(false);\r\n\r\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\r\n  const emailInputIsInvalidLogin =\r\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\r\n\r\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\r\n  const passwordInputIsInvalidLogin =\r\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\r\n\r\n  const emailInputChangeHandlerLogin = (event) => {\r\n    setEnteredEmailLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const emailInputBlurHandlerLogin = () => {\r\n    setEnteredEmailLoginTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandlerLogin = (event) => {\r\n    setEnteredPasswordLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const passwordInputBlurHandlerLogin = () => {\r\n    setEnteredPasswordLoginTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    console.log(\"working\");\r\n    history.push(\"/\");\r\n    // if (isLogin) {\r\n    //   setIsLoading(true);\r\n\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/login\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         email: enteredEmailLogin,\r\n    //         password: enteredPasswordLogin,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (responseData.status === \"201\") {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else {\r\n    //       setIsInValidCredentials(true);\r\n    //       setEnteredEmailLogin(\"\");\r\n    //       setEnteredPasswordLogin(\"\");\r\n\r\n    //       setEnteredEmailLoginTouched(false);\r\n    //       setEnteredPasswordLoginTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   try {\r\n    //     setIsLoading(true);\r\n\r\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         firstName: enteredFirstName,\r\n    //         lastName: enteredLastName,\r\n    //         email: enteredEmail,\r\n    //         mobileNumber: enteredMobileNumber,\r\n    //         password: enteredPassword,\r\n    //         confirmPassword: enteredConfirmPassword,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (\r\n    //       responseData.status !== \"422\" &&\r\n    //       enteredPassword === enteredConfirmPassword\r\n    //     ) {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\r\n    //       setIsPasswordValid(true);\r\n    //     } else {\r\n    //       setIsExsistingUser(true);\r\n    //       setEnteredEmail(\"\");\r\n    //       setEnteredFirstName(\"\");\r\n    //       setEnteredLastName(\"\");\r\n    //       setEnteredMobileNumber(\"\");\r\n    //       setEnteredPassword(\"\");\r\n    //       setEnteredConfirmPassword(\"\");\r\n\r\n    //       setEnteredConfirmPasswordTouched(false);\r\n    //       setEnteredPasswordTouched(false);\r\n    //       setEnteredEmailTouched(false);\r\n    //       setEnteredFirstNameTouched(false);\r\n    //       setEnteredLastNameTouched(false);\r\n    //       setEnteredMobileNumberTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <section className={classes.auth}>\r\n      <h1>Doctor Login</h1>\r\n\r\n      <form onSubmit={formSubmitHandler}>\r\n        {isLogin && (\r\n          <div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"abc@gmail.com\"\r\n                required\r\n                onChange={emailInputChangeHandlerLogin}\r\n                onBlur={emailInputBlurHandlerLogin}\r\n                value={enteredEmailLogin}\r\n              />\r\n              {emailInputIsInvalidLogin && <h4>Email must not be empty</h4>}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                onChange={passwordInputChangeHandlerLogin}\r\n                onBlur={passwordInputBlurHandlerLogin}\r\n                value={enteredPasswordLogin}\r\n              />\r\n              {passwordInputIsInvalidLogin && (\r\n                <h4>Password must not be empty</h4>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className={classes.actions}>\r\n          {!isLoading && <button disabled={!formIsValid}>Login</button>}\r\n          {isLoading && (\r\n            <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n          )}\r\n          {isLogin && isInValidCredentials && (\r\n            <h4>Invalid credentials, could not log you in.</h4>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DoctorForm;\r\n","D:\\project_work\\frontend\\src\\components\\Auth\\AdminForm.js",["132","133","134","135"],"import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport RingLoader from \"react-spinners/RingLoader\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\n\nconst AdminForm = () => {\n  // const authCtx = useContext(AuthContext);\n  const history = useHistory();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\n\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\n    useState(false);\n\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\n    useState(false);\n\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\n  const emailInputIsInvalidLogin =\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\n\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\n  const passwordInputIsInvalidLogin =\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\n\n  const emailInputChangeHandlerLogin = (event) => {\n    setEnteredEmailLogin(event.target.value);\n    setIsInValidCredentials(false);\n  };\n\n  const emailInputBlurHandlerLogin = () => {\n    setEnteredEmailLoginTouched(true);\n  };\n\n  const passwordInputChangeHandlerLogin = (event) => {\n    setEnteredPasswordLogin(event.target.value);\n    setIsInValidCredentials(false);\n  };\n\n  const passwordInputBlurHandlerLogin = () => {\n    setEnteredPasswordLoginTouched(true);\n  };\n\n  let formIsValid = false;\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\n    formIsValid = true;\n  }\n\n  const formSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    console.log(\"working\");\n    history.push(\"/admin/home\");\n    // if (isLogin) {\n    //   setIsLoading(true);\n\n    //   try {\n    //     const response = await fetch(\"http://localhost:5000/login\", {\n    //       method: \"POST\",\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //       body: JSON.stringify({\n    //         email: enteredEmailLogin,\n    //         password: enteredPasswordLogin,\n    //       }),\n    //     });\n\n    //     const responseData = await response.json();\n    //     setIsLoading(false);\n\n    //     if (responseData.status === \"201\") {\n    //       authCtx.login(responseData.token);\n    //       history.replace(\"/\");\n    //       console.log(responseData.message);\n    //     } else {\n    //       setIsInValidCredentials(true);\n    //       setEnteredEmailLogin(\"\");\n    //       setEnteredPasswordLogin(\"\");\n\n    //       setEnteredEmailLoginTouched(false);\n    //       setEnteredPasswordLoginTouched(false);\n    //       console.log(responseData.message);\n    //     }\n    //   } catch (err) {\n    //     console.log(err);\n    //   }\n    // } else {\n    //   try {\n    //     setIsLoading(true);\n\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\n    //       method: \"POST\",\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //       body: JSON.stringify({\n    //         firstName: enteredFirstName,\n    //         lastName: enteredLastName,\n    //         email: enteredEmail,\n    //         mobileNumber: enteredMobileNumber,\n    //         password: enteredPassword,\n    //         confirmPassword: enteredConfirmPassword,\n    //       }),\n    //     });\n\n    //     const responseData = await response.json();\n    //     setIsLoading(false);\n\n    //     if (\n    //       responseData.status !== \"422\" &&\n    //       enteredPassword === enteredConfirmPassword\n    //     ) {\n    //       authCtx.login(responseData.token);\n    //       history.replace(\"/\");\n    //       console.log(responseData.message);\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\n    //       setIsPasswordValid(true);\n    //     } else {\n    //       setIsExsistingUser(true);\n    //       setEnteredEmail(\"\");\n    //       setEnteredFirstName(\"\");\n    //       setEnteredLastName(\"\");\n    //       setEnteredMobileNumber(\"\");\n    //       setEnteredPassword(\"\");\n    //       setEnteredConfirmPassword(\"\");\n\n    //       setEnteredConfirmPasswordTouched(false);\n    //       setEnteredPasswordTouched(false);\n    //       setEnteredEmailTouched(false);\n    //       setEnteredFirstNameTouched(false);\n    //       setEnteredLastNameTouched(false);\n    //       setEnteredMobileNumberTouched(false);\n    //       console.log(responseData.message);\n    //     }\n    //   } catch (err) {\n    //     console.log(err);\n    //   }\n    // }\n  };\n\n  return (\n    <React.Fragment>\n      <section className={classes.auth}>\n        <h1>Admin Login</h1>\n\n        <form onSubmit={formSubmitHandler}>\n        \n          {isLogin && (\n            <div>\n              <div className={classes.control}>\n                <label htmlFor=\"email\">Email</label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  placeholder=\"abc@gmail.com\"\n                  required\n                  onChange={emailInputChangeHandlerLogin}\n                  onBlur={emailInputBlurHandlerLogin}\n                  value={enteredEmailLogin}\n                />\n                {emailInputIsInvalidLogin && <h4>Email must not be empty</h4>}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  placeholder=\"Password\"\n                  required\n                  onChange={passwordInputChangeHandlerLogin}\n                  onBlur={passwordInputBlurHandlerLogin}\n                  value={enteredPasswordLogin}\n                />\n                {passwordInputIsInvalidLogin && (\n                  <h4>Password must not be empty</h4>\n                )}\n              </div>\n            </div>\n          )}\n\n          <div className={classes.actions}>\n            {!isLoading && <button disabled={!formIsValid}>Login</button>}\n            {isLoading && (\n              <RingLoader color=\"white\" height={80} width={80}></RingLoader>\n            )}\n            {isLogin && isInValidCredentials && (\n              <h4>Invalid credentials, could not log you in.</h4>\n            )}\n          </div>\n        </form>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default AdminForm;\n","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminHomePage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminHomePageForm.js",[],"D:\\project_work\\frontend\\src\\components\\Layout\\Dummy.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageDoctorForm.js",["136","137","138","139","140","141","142","143","144"],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageStaffPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageStaffForm.js",["145","146","147","148","149","150"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./AdminManageStaffForm.module.css\";\r\n\r\nconst AdminManageStaffForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n  const [isExsistingUser, setIsExsistingUser] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(false);\r\n\r\n  const [enteredAddress, setEnteredAddress] = useState(\"\");\r\n  const [enteredAddressTouched, setEnteredAddressTouched] = useState(false);\r\n\r\n  const [enteredFirstName, setEnteredFirstName] = useState(\"\");\r\n  const [enteredFirstNameTouched, setEnteredFirstNameTouched] = useState(false);\r\n\r\n  const [enteredLastName, setEnteredLastName] = useState(\"\");\r\n  const [enteredLastNameTouched, setEnteredLastNameTouched] = useState(false);\r\n\r\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\r\n\r\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\r\n  const [enteredPasswordTouched, setEnteredPasswordTouched] = useState(false);\r\n\r\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState(\"\");\r\n  const [enteredConfirmPasswordTouched, setEnteredConfirmPasswordTouched] =\r\n    useState(false);\r\n\r\n  const [enteredMobileNumber, setEnteredMobileNumber] = useState(\"\");\r\n  const [enteredMobileNumberTouched, setEnteredMobileNumberTouched] =\r\n    useState(false);\r\n\r\n  const enteredAddressIsValid = enteredAddress.trim() !== \"\";\r\n  const addressInputIsInvalid = !enteredAddressIsValid && enteredAddressTouched;\r\n\r\n  const enteredFirstNameIsValid = enteredFirstName.trim() !== \"\";\r\n  const firstNameInputIsInValid =\r\n    !enteredFirstNameIsValid && enteredFirstNameTouched;\r\n\r\n  const enteredLastNameIsValid = enteredLastName.trim() !== \"\";\r\n  const lastNameInputIsInValid =\r\n    !enteredLastNameIsValid && enteredLastNameTouched;\r\n\r\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\";\r\n  const emailInputIsInValid = !enteredEmailIsValid && enteredEmailTouched;\r\n\r\n  const enteredPasswordIsValid = enteredPassword.trim() !== \"\";\r\n  const passwordInputIsInValid =\r\n    !enteredPasswordIsValid && enteredPasswordTouched;\r\n\r\n  const enteredConfirmPasswordIsValid = enteredConfirmPassword.trim() !== \"\";\r\n  const ConfirmPasswordInputIsInValid =\r\n    !enteredConfirmPasswordIsValid && enteredConfirmPasswordTouched;\r\n\r\n  const enteredMobileNumberIsValid = enteredMobileNumber.trim() !== \"\";\r\n  const mobileNumberInputIsInValid =\r\n    !enteredMobileNumberIsValid && enteredMobileNumberTouched;\r\n\r\n  const addressInputChangeHandler = (event) => {\r\n    setEnteredAddress(event.target.value);\r\n  };\r\n\r\n  const addressInputBlurHandler = () => {\r\n    setEnteredAddressTouched(true);\r\n  };\r\n  \r\n  const firstNameInputChangeHandler = (event) => {\r\n    setEnteredFirstName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const firstNameInputBlurHandler = (event) => {\r\n    setEnteredFirstNameTouched(true);\r\n  };\r\n\r\n  const lastNameInputChangeHandler = (event) => {\r\n    setEnteredLastName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const lastNameInputBlurHandler = (event) => {\r\n    setEnteredLastNameTouched(true);\r\n  };\r\n  const emailInputChangeHandler = (event) => {\r\n    setEnteredEmail(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const emailInputBlurHandler = (event) => {\r\n    setEnteredEmailTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandler = (event) => {\r\n    setEnteredPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const passwordInputBlurHandler = (event) => {\r\n    setEnteredPasswordTouched(true);\r\n  };\r\n\r\n  const confirmPasswordInputChangeHandler = (event) => {\r\n    setEnteredConfirmPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const confirmPasswordInputBlurHandler = (event) => {\r\n    setEnteredConfirmPasswordTouched(true);\r\n  };\r\n\r\n  const mobileNumberInputChangeHandler = (event) => {\r\n    setEnteredMobileNumber(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const mobileNumberInputBlurHandler = (event) => {\r\n    setEnteredMobileNumberTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (\r\n    enteredEmailIsValid &&\r\n    enteredFirstNameIsValid &&\r\n    enteredLastNameIsValid &&\r\n    enteredPasswordIsValid &&\r\n    enteredConfirmPasswordIsValid &&\r\n    enteredMobileNumberIsValid\r\n  ) {\r\n    formIsValid = true;\r\n  }\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Staff Signed Up Successfully\");\r\n    // if (isLogin) {\r\n    //   setIsLoading(true);\r\n\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/login\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         email: enteredEmailLogin,\r\n    //         password: enteredPasswordLogin,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (responseData.status === \"201\") {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else {\r\n    //       setIsInValidCredentials(true);\r\n    //       setEnteredEmailLogin(\"\");\r\n    //       setEnteredPasswordLogin(\"\");\r\n\r\n    //       setEnteredEmailLoginTouched(false);\r\n    //       setEnteredPasswordLoginTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   try {\r\n    //     setIsLoading(true);\r\n\r\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         firstName: enteredFirstName,\r\n    //         lastName: enteredLastName,\r\n    //         email: enteredEmail,\r\n    //         mobileNumber: enteredMobileNumber,\r\n    //         password: enteredPassword,\r\n    //         confirmPassword: enteredConfirmPassword,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (\r\n    //       responseData.status !== \"422\" &&\r\n    //       enteredPassword === enteredConfirmPassword\r\n    //     ) {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\r\n    //       setIsPasswordValid(true);\r\n    //     } else {\r\n    //       setIsExsistingUser(true);\r\n    //       setEnteredEmail(\"\");\r\n    //       setEnteredFirstName(\"\");\r\n    //       setEnteredLastName(\"\");\r\n    //       setEnteredMobileNumber(\"\");\r\n    //       setEnteredPassword(\"\");\r\n    //       setEnteredConfirmPassword(\"\");\r\n\r\n    //       setEnteredConfirmPasswordTouched(false);\r\n    //       setEnteredPasswordTouched(false);\r\n    //       setEnteredEmailTouched(false);\r\n    //       setEnteredFirstNameTouched(false);\r\n    //       setEnteredLastNameTouched(false);\r\n    //       setEnteredMobileNumberTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n\r\n    <div className={classes.html}>\r\n    <section className={classes.auth}>\r\n      <h1>Add New Staff</h1>\r\n\r\n      <form onSubmit={formSubmitHandler}>\r\n        {!isLogin && (\r\n          <div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">First Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"fname\"\r\n                placeholder=\"First Name\"\r\n                required\r\n                onChange={firstNameInputChangeHandler}\r\n                onBlur={firstNameInputBlurHandler}\r\n                value={enteredFirstName}\r\n              />\r\n              {firstNameInputIsInValid && <h4>First Name must not be empty</h4>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">Last Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"lname\"\r\n                placeholder=\"Last Name\"\r\n                required\r\n                onChange={lastNameInputChangeHandler}\r\n                onBlur={lastNameInputBlurHandler}\r\n                value={enteredLastName}\r\n              />\r\n              {lastNameInputIsInValid && <h4>Last Name must not be empty</h4>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"abc@gmail.com\"\r\n                id=\"email\"\r\n                required\r\n                onChange={emailInputChangeHandler}\r\n                onBlur={emailInputBlurHandler}\r\n                value={enteredEmail}\r\n              />\r\n              {emailInputIsInValid && <h4>Email must not be empty</h4>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">Mobile Number</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"number\"\r\n                placeholder=\"10 digit mobile number\"\r\n                pattern=\"[0-9]{10}\"\r\n                required\r\n                onChange={mobileNumberInputChangeHandler}\r\n                onBlur={mobileNumberInputBlurHandler}\r\n                value={enteredMobileNumber}\r\n              />\r\n              {mobileNumberInputIsInValid && (\r\n                <h4>Mobile Number must not be empty</h4>\r\n              )}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">Address</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"address\"\r\n                placeholder=\"Address\"\r\n                required\r\n                onChange={addressInputChangeHandler}\r\n                onBlur={addressInputBlurHandler}\r\n                value={enteredAddress}\r\n              />\r\n              {addressInputIsInvalid && <h4>Address must not be empty</h4>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                minLength=\"6\"\r\n                onChange={passwordInputChangeHandler}\r\n                onBlur={passwordInputBlurHandler}\r\n                value={enteredPassword}\r\n              />\r\n              {passwordInputIsInValid && <h4>Password must not be empty</h4>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"password\">Confirm Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"cpassword\"\r\n                placeholder=\"Confirm Password\"\r\n                required\r\n                minLength=\"6\"\r\n                onChange={confirmPasswordInputChangeHandler}\r\n                onBlur={confirmPasswordInputBlurHandler}\r\n                value={enteredConfirmPassword}\r\n              />\r\n              {ConfirmPasswordInputIsInValid && (\r\n                <h4>Confirm Password must not be empty</h4>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className={classes.actions}>\r\n          {!isLoading && (\r\n            <button disabled={!formIsValid}>Create Account</button>\r\n          )}\r\n          {isLoading && (\r\n            <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n          )}\r\n          {isLogin && isInValidCredentials && (\r\n            <h4>Invalid credentials, could not log you in.</h4>\r\n          )}\r\n          {!isLogin && isExsistingUser && (\r\n            <h4>User exists already, please login instead.</h4>\r\n          )}\r\n          {!isLogin && isPasswordValid && (\r\n            <h4>Password and Confirm Password must be same.</h4>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminManageStaffForm;\r\n","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js",["151","152","153","154","155","156","157","158","159","160","161","162","163"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./AdminDeleteDoctorForm.module.css\";\r\n\r\nconst AdminDeleteDoctorForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n  const [isExsistingUser, setIsExsistingUser] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(false);\r\n\r\n  const [enteredDoctorId, setEnteredDoctorId] = useState(\"\");\r\n  const [enteredDoctorIdTouched, setEnteredDoctorIdTouched] = useState(false);\r\n\r\n  const enteredDoctorIdIsValid = enteredDoctorId.trim() !== \"\";\r\n  const doctorIdInputIsInValid =\r\n    !enteredDoctorIdIsValid && enteredDoctorIdTouched;\r\n\r\n  const doctorIdInputChangeHandler = (event) => {\r\n    setEnteredDoctorId(event.target.value);\r\n  };\r\n\r\n  const doctorIdInputBlurHandler = (event) => {\r\n    setEnteredDoctorIdTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (enteredDoctorIdIsValid) {\r\n    formIsValid = true;\r\n  }\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Doctor Deleted Successfully\");\r\n    // if (isLogin) {\r\n    //   setIsLoading(true);\r\n\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/login\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         email: enteredEmailLogin,\r\n    //         password: enteredPasswordLogin,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (responseData.status === \"201\") {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else {\r\n    //       setIsInValidCredentials(true);\r\n    //       setEnteredEmailLogin(\"\");\r\n    //       setEnteredPasswordLogin(\"\");\r\n\r\n    //       setEnteredEmailLoginTouched(false);\r\n    //       setEnteredPasswordLoginTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   try {\r\n    //     setIsLoading(true);\r\n\r\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         firstName: enteredFirstName,\r\n    //         lastName: enteredLastName,\r\n    //         email: enteredEmail,\r\n    //         mobileNumber: enteredMobileNumber,\r\n    //         password: enteredPassword,\r\n    //         confirmPassword: enteredConfirmPassword,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (\r\n    //       responseData.status !== \"422\" &&\r\n    //       enteredPassword === enteredConfirmPassword\r\n    //     ) {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\r\n    //       setIsPasswordValid(true);\r\n    //     } else {\r\n    //       setIsExsistingUser(true);\r\n    //       setEnteredEmail(\"\");\r\n    //       setEnteredFirstName(\"\");\r\n    //       setEnteredLastName(\"\");\r\n    //       setEnteredMobileNumber(\"\");\r\n    //       setEnteredPassword(\"\");\r\n    //       setEnteredConfirmPassword(\"\");\r\n\r\n    //       setEnteredConfirmPasswordTouched(false);\r\n    //       setEnteredPasswordTouched(false);\r\n    //       setEnteredEmailTouched(false);\r\n    //       setEnteredFirstNameTouched(false);\r\n    //       setEnteredLastNameTouched(false);\r\n    //       setEnteredMobileNumberTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.html}>\r\n    <section className={classes.auth}>\r\n      <h1>Delete Doctor</h1>\r\n\r\n      <form onSubmit={formSubmitHandler}>\r\n        <div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Doctor ID</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"id\"\r\n              placeholder=\"Enter Doctor ID\"\r\n              required\r\n              onChange={doctorIdInputChangeHandler}\r\n              onBlur={doctorIdInputBlurHandler}\r\n              value={enteredDoctorId}\r\n            />\r\n            {doctorIdInputIsInValid && <h4>Doctor ID must not be empty</h4>}\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button disabled={!formIsValid}>Delete</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </section>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default AdminDeleteDoctorForm;","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js",["164","165","166","167","168","169","170","171","172","173","174","175","176"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./AdminDeleteStaffForm.module.css\";\r\n\r\nconst AdminDeleteStaffForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n  const [isExsistingUser, setIsExsistingUser] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(false);\r\n\r\n  const [enteredStaffId, setEnteredStaffId] = useState(\"\");\r\n  const [enteredStaffIdTouched, setEnteredStaffIdTouched] = useState(false);\r\n\r\n  const enteredStaffIdIsValid = enteredStaffId.trim() !== \"\";\r\n  const staffIdInputIsInValid =\r\n    !enteredStaffIdIsValid && enteredStaffIdTouched;\r\n\r\n  const doctorIdInputChangeHandler = (event) => {\r\n    setEnteredStaffId(event.target.value);\r\n  };\r\n\r\n  const doctorIdInputBlurHandler = (event) => {\r\n    setEnteredStaffIdTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (enteredStaffIdIsValid) {\r\n    formIsValid = true;\r\n  }\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Doctor Deleted Successfully\");\r\n    // if (isLogin) {\r\n    //   setIsLoading(true);\r\n\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/login\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         email: enteredEmailLogin,\r\n    //         password: enteredPasswordLogin,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (responseData.status === \"201\") {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else {\r\n    //       setIsInValidCredentials(true);\r\n    //       setEnteredEmailLogin(\"\");\r\n    //       setEnteredPasswordLogin(\"\");\r\n\r\n    //       setEnteredEmailLoginTouched(false);\r\n    //       setEnteredPasswordLoginTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   try {\r\n    //     setIsLoading(true);\r\n\r\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         firstName: enteredFirstName,\r\n    //         lastName: enteredLastName,\r\n    //         email: enteredEmail,\r\n    //         mobileNumber: enteredMobileNumber,\r\n    //         password: enteredPassword,\r\n    //         confirmPassword: enteredConfirmPassword,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (\r\n    //       responseData.status !== \"422\" &&\r\n    //       enteredPassword === enteredConfirmPassword\r\n    //     ) {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\r\n    //       setIsPasswordValid(true);\r\n    //     } else {\r\n    //       setIsExsistingUser(true);\r\n    //       setEnteredEmail(\"\");\r\n    //       setEnteredFirstName(\"\");\r\n    //       setEnteredLastName(\"\");\r\n    //       setEnteredMobileNumber(\"\");\r\n    //       setEnteredPassword(\"\");\r\n    //       setEnteredConfirmPassword(\"\");\r\n\r\n    //       setEnteredConfirmPasswordTouched(false);\r\n    //       setEnteredPasswordTouched(false);\r\n    //       setEnteredEmailTouched(false);\r\n    //       setEnteredFirstNameTouched(false);\r\n    //       setEnteredLastNameTouched(false);\r\n    //       setEnteredMobileNumberTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.html}>\r\n    <section className={classes.auth}>\r\n      <h1>Delete Staff</h1>\r\n\r\n      <form onSubmit={formSubmitHandler}>\r\n        <div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Staff ID</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"id\"\r\n              placeholder=\"Enter Staff ID\"\r\n              required\r\n              onChange={doctorIdInputChangeHandler}\r\n              onBlur={doctorIdInputBlurHandler}\r\n              value={enteredStaffId}\r\n            />\r\n            {staffIdInputIsInValid && <h4>Staff ID must not be empty</h4>}\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button disabled={!formIsValid}>Delete</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDeleteStaffForm;\r\n",{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":3,"column":8,"nodeType":"183","messageId":"184","endLine":3,"endColumn":14},{"ruleId":"181","severity":1,"message":"185","line":10,"column":8,"nodeType":"183","messageId":"184","endLine":10,"endColumn":13},{"ruleId":"177","replacedBy":"186"},{"ruleId":"179","replacedBy":"187"},{"ruleId":"181","severity":1,"message":"188","line":1,"column":20,"nodeType":"183","messageId":"184","endLine":1,"endColumn":30},{"ruleId":"181","severity":1,"message":"189","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":19},{"ruleId":"181","severity":1,"message":"190","line":11,"column":19,"nodeType":"183","messageId":"184","endLine":11,"endColumn":29},{"ruleId":"181","severity":1,"message":"191","line":12,"column":21,"nodeType":"183","messageId":"184","endLine":12,"endColumn":33},{"ruleId":"181","severity":1,"message":"188","line":1,"column":27,"nodeType":"183","messageId":"184","endLine":1,"endColumn":37},{"ruleId":"181","severity":1,"message":"189","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":19},{"ruleId":"181","severity":1,"message":"190","line":11,"column":19,"nodeType":"183","messageId":"184","endLine":11,"endColumn":29},{"ruleId":"181","severity":1,"message":"191","line":12,"column":21,"nodeType":"183","messageId":"184","endLine":12,"endColumn":33},{"ruleId":"181","severity":1,"message":"192","line":6,"column":10,"nodeType":"183","messageId":"184","endLine":6,"endColumn":25},{"ruleId":"181","severity":1,"message":"193","line":7,"column":8,"nodeType":"183","messageId":"184","endLine":7,"endColumn":13},{"ruleId":"181","severity":1,"message":"194","line":10,"column":9,"nodeType":"183","messageId":"184","endLine":10,"endColumn":16},{"ruleId":"181","severity":1,"message":"195","line":11,"column":9,"nodeType":"183","messageId":"184","endLine":11,"endColumn":16},{"ruleId":"181","severity":1,"message":"190","line":13,"column":19,"nodeType":"183","messageId":"184","endLine":13,"endColumn":29},{"ruleId":"181","severity":1,"message":"191","line":14,"column":21,"nodeType":"183","messageId":"184","endLine":14,"endColumn":33},{"ruleId":"181","severity":1,"message":"196","line":15,"column":32,"nodeType":"183","messageId":"184","endLine":15,"endColumn":55},{"ruleId":"181","severity":1,"message":"197","line":17,"column":27,"nodeType":"183","messageId":"184","endLine":17,"endColumn":45},{"ruleId":"181","severity":1,"message":"198","line":153,"column":5,"nodeType":"183","messageId":"184","endLine":153,"endColumn":16},{"ruleId":"181","severity":1,"message":"194","line":8,"column":9,"nodeType":"183","messageId":"184","endLine":8,"endColumn":16},{"ruleId":"181","severity":1,"message":"195","line":9,"column":9,"nodeType":"183","messageId":"184","endLine":9,"endColumn":16},{"ruleId":"181","severity":1,"message":"190","line":11,"column":19,"nodeType":"183","messageId":"184","endLine":11,"endColumn":29},{"ruleId":"181","severity":1,"message":"191","line":12,"column":21,"nodeType":"183","messageId":"184","endLine":12,"endColumn":33},{"ruleId":"181","severity":1,"message":"196","line":13,"column":32,"nodeType":"183","messageId":"184","endLine":13,"endColumn":55},{"ruleId":"181","severity":1,"message":"197","line":15,"column":27,"nodeType":"183","messageId":"184","endLine":15,"endColumn":45},{"ruleId":"181","severity":1,"message":"199","line":3,"column":8,"nodeType":"183","messageId":"184","endLine":3,"endColumn":18},{"ruleId":"181","severity":1,"message":"194","line":8,"column":9,"nodeType":"183","messageId":"184","endLine":8,"endColumn":16},{"ruleId":"181","severity":1,"message":"195","line":9,"column":9,"nodeType":"183","messageId":"184","endLine":9,"endColumn":16},{"ruleId":"181","severity":1,"message":"200","line":11,"column":10,"nodeType":"183","messageId":"184","endLine":11,"endColumn":17},{"ruleId":"181","severity":1,"message":"190","line":11,"column":19,"nodeType":"183","messageId":"184","endLine":11,"endColumn":29},{"ruleId":"181","severity":1,"message":"201","line":12,"column":10,"nodeType":"183","messageId":"184","endLine":12,"endColumn":19},{"ruleId":"181","severity":1,"message":"191","line":12,"column":21,"nodeType":"183","messageId":"184","endLine":12,"endColumn":33},{"ruleId":"181","severity":1,"message":"202","line":13,"column":10,"nodeType":"183","messageId":"184","endLine":13,"endColumn":30},{"ruleId":"181","severity":1,"message":"196","line":13,"column":32,"nodeType":"183","messageId":"184","endLine":13,"endColumn":55},{"ruleId":"181","severity":1,"message":"203","line":14,"column":10,"nodeType":"183","messageId":"184","endLine":14,"endColumn":25},{"ruleId":"181","severity":1,"message":"204","line":14,"column":27,"nodeType":"183","messageId":"184","endLine":14,"endColumn":45},{"ruleId":"181","severity":1,"message":"205","line":15,"column":10,"nodeType":"183","messageId":"184","endLine":15,"endColumn":25},{"ruleId":"181","severity":1,"message":"197","line":15,"column":27,"nodeType":"183","messageId":"184","endLine":15,"endColumn":45},{"ruleId":"181","severity":1,"message":"199","line":3,"column":8,"nodeType":"183","messageId":"184","endLine":3,"endColumn":18},{"ruleId":"181","severity":1,"message":"194","line":8,"column":9,"nodeType":"183","messageId":"184","endLine":8,"endColumn":16},{"ruleId":"181","severity":1,"message":"195","line":9,"column":9,"nodeType":"183","messageId":"184","endLine":9,"endColumn":16},{"ruleId":"181","severity":1,"message":"200","line":11,"column":10,"nodeType":"183","messageId":"184","endLine":11,"endColumn":17},{"ruleId":"181","severity":1,"message":"190","line":11,"column":19,"nodeType":"183","messageId":"184","endLine":11,"endColumn":29},{"ruleId":"181","severity":1,"message":"201","line":12,"column":10,"nodeType":"183","messageId":"184","endLine":12,"endColumn":19},{"ruleId":"181","severity":1,"message":"191","line":12,"column":21,"nodeType":"183","messageId":"184","endLine":12,"endColumn":33},{"ruleId":"181","severity":1,"message":"202","line":13,"column":10,"nodeType":"183","messageId":"184","endLine":13,"endColumn":30},{"ruleId":"181","severity":1,"message":"196","line":13,"column":32,"nodeType":"183","messageId":"184","endLine":13,"endColumn":55},{"ruleId":"181","severity":1,"message":"203","line":14,"column":10,"nodeType":"183","messageId":"184","endLine":14,"endColumn":25},{"ruleId":"181","severity":1,"message":"204","line":14,"column":27,"nodeType":"183","messageId":"184","endLine":14,"endColumn":45},{"ruleId":"181","severity":1,"message":"205","line":15,"column":10,"nodeType":"183","messageId":"184","endLine":15,"endColumn":25},{"ruleId":"181","severity":1,"message":"197","line":15,"column":27,"nodeType":"183","messageId":"184","endLine":15,"endColumn":45},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"no-unused-vars","'Layout' is defined but never used.","Identifier","unusedVar","'Dummy' is defined but never used.",["206"],["207"],"'useContext' is defined but never used.","'AuthContext' is defined but never used.","'setIsLogin' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'BsFillAlarmFill' is defined but never used.","'Input' is defined but never used.","'authCtx' is assigned a value but never used.","'history' is assigned a value but never used.","'setIsInValidCredentials' is assigned a value but never used.","'setIsPasswordValid' is assigned a value but never used.","'formIsValid' is assigned a value but never used.","'RingLoader' is defined but never used.","'isLogin' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'isInValidCredentials' is assigned a value but never used.","'isExsistingUser' is assigned a value but never used.","'setIsExsistingUser' is assigned a value but never used.","'isPasswordValid' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]