[{"D:\\project_work\\frontend\\src\\index.js":"1","D:\\project_work\\frontend\\src\\App.js":"2","D:\\project_work\\frontend\\src\\pages\\HomePage.js":"3","D:\\project_work\\frontend\\src\\components\\Profile\\UserProfile.js":"4","D:\\project_work\\frontend\\src\\components\\StartingPage\\StartingPageContent.js":"5","D:\\project_work\\frontend\\src\\components\\Profile\\ProfileForm.js":"6","D:\\project_work\\frontend\\src\\store\\auth-context.js":"7","D:\\project_work\\frontend\\src\\pages\\AdminPage.js":"8","D:\\project_work\\frontend\\src\\pages\\PatientPage.js":"9","D:\\project_work\\frontend\\src\\components\\Auth\\PatientForm.js":"10","D:\\project_work\\frontend\\src\\pages\\DoctorPage.js":"11","D:\\project_work\\frontend\\src\\components\\Auth\\DoctorForm.js":"12","D:\\project_work\\frontend\\src\\components\\Auth\\AdminForm.js":"13","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminHomePage.js":"14","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js":"15","D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageDoctorForm.js":"16","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageStaffPage.js":"17","D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageStaffForm.js":"18","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js":"19","D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js":"20","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js":"21","D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js":"22","D:\\project_work\\frontend\\src\\pages\\MainNavigation.js":"23","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminMainNavigation.js":"24","D:\\project_work\\frontend\\src\\components\\StartingPage\\AdminStarting.js":"25","D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorHomePage.js":"26","D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorMainNavigation.js":"27","D:\\project_work\\frontend\\src\\components\\StartingPage\\DoctorStarting.js":"28","D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorContactUs.js":"29","D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorAboutUs.js":"30","D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorDetails.js":"31","D:\\project_work\\frontend\\src\\pages\\Patient\\PatientAboutUs.js":"32","D:\\project_work\\frontend\\src\\pages\\Patient\\PatientDetails.js":"33","D:\\project_work\\frontend\\src\\pages\\Patient\\PatientHomePage.js":"34","D:\\project_work\\frontend\\src\\pages\\Patient\\PatientContactUs.js":"35","D:\\project_work\\frontend\\src\\pages\\Patient\\PatientMainNavigation.js":"36","D:\\project_work\\frontend\\src\\components\\StartingPage\\PatientStarting.js":"37","D:\\project_work\\frontend\\src\\pages\\StaffPage.js":"38","D:\\project_work\\frontend\\src\\components\\Auth\\StaffForm.js":"39","D:\\project_work\\frontend\\src\\pages\\Staff\\StaffHomePage.js":"40","D:\\project_work\\frontend\\src\\components\\StartingPage\\StaffStarting.js":"41","D:\\project_work\\frontend\\src\\pages\\Staff\\StaffMainNavigation.js":"42","D:\\project_work\\frontend\\src\\pages\\Staff\\UploadDocument.js":"43","D:\\project_work\\frontend\\src\\pages\\Staff\\StaffManagePatientId.js":"44","D:\\project_work\\frontend\\src\\pages\\Staff\\UploadPDFDocument.js":"45","D:\\project_work\\frontend\\src\\pages\\Footer.js":"46","D:\\project_work\\frontend\\src\\pages\\HomeContactUs.js":"47","D:\\project_work\\frontend\\src\\pages\\HomeAboutUs.js":"48","D:\\project_work\\frontend\\src\\pages\\Patient\\PatientDocuments.js":"49","D:\\project_work\\frontend\\src\\pages\\Patient\\SearchDoctor.js":"50","D:\\project_work\\frontend\\src\\pages\\Patient\\Map.js":"51","D:\\project_work\\frontend\\src\\pages\\Patient\\UpdateProfile.js":"52","D:\\project_work\\frontend\\src\\pages\\Doctor\\UpdateDoctorProfile.js":"53","D:\\project_work\\frontend\\src\\pages\\Staff\\UpdateStaffProfile.js":"54","D:\\project_work\\frontend\\src\\pages\\Staff\\StaffDetail.js":"55"},{"size":428,"mtime":1645865985511,"results":"56","hashOfConfig":"57"},{"size":4819,"mtime":1646328479036,"results":"58","hashOfConfig":"57"},{"size":339,"mtime":1643903733376,"results":"59","hashOfConfig":"57"},{"size":284,"mtime":1643428810689,"results":"60","hashOfConfig":"57"},{"size":2302,"mtime":1645685077282,"results":"61","hashOfConfig":"57"},{"size":533,"mtime":1643378828277,"results":"62","hashOfConfig":"57"},{"size":721,"mtime":1644769238061,"results":"63","hashOfConfig":"57"},{"size":303,"mtime":1643895311886,"results":"64","hashOfConfig":"57"},{"size":328,"mtime":1643895425726,"results":"65","hashOfConfig":"57"},{"size":16687,"mtime":1646311787950,"results":"66","hashOfConfig":"57"},{"size":323,"mtime":1643904126221,"results":"67","hashOfConfig":"57"},{"size":5590,"mtime":1645966675357,"results":"68","hashOfConfig":"57"},{"size":5854,"mtime":1645696775708,"results":"69","hashOfConfig":"57"},{"size":383,"mtime":1643911702083,"results":"70","hashOfConfig":"57"},{"size":425,"mtime":1643895944217,"results":"71","hashOfConfig":"57"},{"size":13588,"mtime":1644987840744,"results":"72","hashOfConfig":"57"},{"size":418,"mtime":1643903736491,"results":"73","hashOfConfig":"57"},{"size":12079,"mtime":1644987810524,"results":"74","hashOfConfig":"57"},{"size":424,"mtime":1643895921212,"results":"75","hashOfConfig":"57"},{"size":3358,"mtime":1645684965893,"results":"76","hashOfConfig":"57"},{"size":420,"mtime":1643895933753,"results":"77","hashOfConfig":"57"},{"size":3268,"mtime":1645684970768,"results":"78","hashOfConfig":"57"},{"size":3855,"mtime":1645686759113,"results":"79","hashOfConfig":"57"},{"size":4067,"mtime":1645687071817,"results":"80","hashOfConfig":"57"},{"size":435,"mtime":1644583242890,"results":"81","hashOfConfig":"57"},{"size":393,"mtime":1644584986968,"results":"82","hashOfConfig":"57"},{"size":2413,"mtime":1646325306487,"results":"83","hashOfConfig":"57"},{"size":1467,"mtime":1645380271538,"results":"84","hashOfConfig":"57"},{"size":381,"mtime":1645685125913,"results":"85","hashOfConfig":"57"},{"size":2612,"mtime":1645120164281,"results":"86","hashOfConfig":"57"},{"size":11989,"mtime":1645686565340,"results":"87","hashOfConfig":"57"},{"size":2547,"mtime":1645120187425,"results":"88","hashOfConfig":"57"},{"size":9418,"mtime":1646325194087,"results":"89","hashOfConfig":"57"},{"size":403,"mtime":1644640680646,"results":"90","hashOfConfig":"57"},{"size":388,"mtime":1645685202167,"results":"91","hashOfConfig":"57"},{"size":2715,"mtime":1646310728363,"results":"92","hashOfConfig":"57"},{"size":1472,"mtime":1645380435953,"results":"93","hashOfConfig":"57"},{"size":318,"mtime":1644986924725,"results":"94","hashOfConfig":"57"},{"size":5880,"mtime":1645697066146,"results":"95","hashOfConfig":"57"},{"size":383,"mtime":1644988178739,"results":"96","hashOfConfig":"57"},{"size":435,"mtime":1644988244991,"results":"97","hashOfConfig":"57"},{"size":1928,"mtime":1646328307742,"results":"98","hashOfConfig":"57"},{"size":397,"mtime":1645685554930,"results":"99","hashOfConfig":"57"},{"size":3473,"mtime":1645685480192,"results":"100","hashOfConfig":"57"},{"size":4257,"mtime":1645685708035,"results":"101","hashOfConfig":"57"},{"size":1644,"mtime":1645117708193,"results":"102","hashOfConfig":"57"},{"size":3151,"mtime":1645686889669,"results":"103","hashOfConfig":"57"},{"size":3492,"mtime":1645686814697,"results":"104","hashOfConfig":"57"},{"size":2203,"mtime":1645686628368,"results":"105","hashOfConfig":"57"},{"size":1292,"mtime":1645870045332,"results":"106","hashOfConfig":"57"},{"size":805,"mtime":1645871926488,"results":"107","hashOfConfig":"57"},{"size":6824,"mtime":1646324847526,"results":"108","hashOfConfig":"57"},{"size":6883,"mtime":1646327284783,"results":"109","hashOfConfig":"57"},{"size":6852,"mtime":1646329209259,"results":"110","hashOfConfig":"57"},{"size":11129,"mtime":1646328730749,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"qn2svh",{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"114"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"114"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"114"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\project_work\\frontend\\src\\index.js",[],["230","231"],"D:\\project_work\\frontend\\src\\App.js",[],"D:\\project_work\\frontend\\src\\pages\\HomePage.js",[],"D:\\project_work\\frontend\\src\\components\\Profile\\UserProfile.js",[],"D:\\project_work\\frontend\\src\\components\\StartingPage\\StartingPageContent.js",[],"D:\\project_work\\frontend\\src\\components\\Profile\\ProfileForm.js",[],["232","233"],"D:\\project_work\\frontend\\src\\store\\auth-context.js",[],"D:\\project_work\\frontend\\src\\pages\\AdminPage.js",[],"D:\\project_work\\frontend\\src\\pages\\PatientPage.js",[],"D:\\project_work\\frontend\\src\\components\\Auth\\PatientForm.js",["234","235"],"import React, { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport PatientImage from \"../images/PatientVector.jpg\"; \r\n//import classes from \"./AdminForm.module.css\";\r\nimport classes from \"./PatientForm.module.css\";\r\nimport { Form, Group, Card } from \"react-bootstrap\";\r\nconst PatientForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n  const [isExsistingUser, setIsExsistingUser] = useState(false);\r\n  const [isPasswordInValid, setIsPasswordInValid] = useState(false);\r\n\r\n  const [enteredFirstName, setEnteredFirstName] = useState(\"\");\r\n  const [enteredFirstNameTouched, setEnteredFirstNameTouched] = useState(false);\r\n\r\n  const [enteredLastName, setEnteredLastName] = useState(\"\");\r\n  const [enteredLastNameTouched, setEnteredLastNameTouched] = useState(false);\r\n\r\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\r\n\r\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\r\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\r\n    useState(false);\r\n\r\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\r\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\r\n    useState(false);\r\n\r\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\r\n  const [enteredPasswordTouched, setEnteredPasswordTouched] = useState(false);\r\n\r\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState(\"\");\r\n  const [enteredConfirmPasswordTouched, setEnteredConfirmPasswordTouched] =\r\n    useState(false);\r\n\r\n  const [enteredMobileNumber, setEnteredMobileNumber] = useState(\"\");\r\n  const [enteredMobileNumberTouched, setEnteredMobileNumberTouched] =\r\n    useState(false);\r\n\r\n  const enteredFirstNameIsValid = enteredFirstName.trim() !== \"\";\r\n  const firstNameInputIsInValid =\r\n    !enteredFirstNameIsValid && enteredFirstNameTouched;\r\n\r\n  const enteredLastNameIsValid = enteredLastName.trim() !== \"\";\r\n  const lastNameInputIsInValid =\r\n    !enteredLastNameIsValid && enteredLastNameTouched;\r\n\r\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\";\r\n  const emailInputIsInValid = !enteredEmailIsValid && enteredEmailTouched;\r\n\r\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\r\n  const emailInputIsInvalidLogin =\r\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\r\n\r\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\r\n  const passwordInputIsInvalidLogin =\r\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\r\n\r\n  const enteredPasswordIsValid = enteredPassword.trim() !== \"\";\r\n  const passwordInputIsInValid =\r\n    !enteredPasswordIsValid && enteredPasswordTouched;\r\n\r\n  const enteredConfirmPasswordIsValid = enteredConfirmPassword.trim() !== \"\";\r\n  const ConfirmPasswordInputIsInValid =\r\n    !enteredConfirmPasswordIsValid && enteredConfirmPasswordTouched;\r\n\r\n  const enteredMobileNumberIsValid = enteredMobileNumber.trim() !== \"\";\r\n  const mobileNumberInputIsInValid =\r\n    !enteredMobileNumberIsValid && enteredMobileNumberTouched;\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsLogin((prevState) => !prevState);\r\n  };\r\n\r\n  const firstNameInputChangeHandler = (event) => {\r\n    setEnteredFirstName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const firstNameInputBlurHandler = (event) => {\r\n    setEnteredFirstNameTouched(true);\r\n  };\r\n\r\n  const lastNameInputChangeHandler = (event) => {\r\n    setEnteredLastName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const lastNameInputBlurHandler = (event) => {\r\n    setEnteredLastNameTouched(true);\r\n  };\r\n  const emailInputChangeHandler = (event) => {\r\n    setEnteredEmail(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const emailInputBlurHandler = (event) => {\r\n    setEnteredEmailTouched(true);\r\n  };\r\n\r\n  const emailInputChangeHandlerLogin = (event) => {\r\n    setEnteredEmailLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const emailInputBlurHandlerLogin = () => {\r\n    setEnteredEmailLoginTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandlerLogin = (event) => {\r\n    setEnteredPasswordLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const passwordInputBlurHandlerLogin = () => {\r\n    setEnteredPasswordLoginTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandler = (event) => {\r\n    setEnteredPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n    setIsPasswordInValid(false);\r\n  };\r\n\r\n  const passwordInputBlurHandler = (event) => {\r\n    setEnteredPasswordTouched(true);\r\n  };\r\n\r\n  const confirmPasswordInputChangeHandler = (event) => {\r\n    setEnteredConfirmPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n    setIsPasswordInValid(false);\r\n  };\r\n\r\n  const confirmPasswordInputBlurHandler = (event) => {\r\n    setEnteredConfirmPasswordTouched(true);\r\n  };\r\n\r\n  const mobileNumberInputChangeHandler = (event) => {\r\n    setEnteredMobileNumber(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const mobileNumberInputBlurHandler = (event) => {\r\n    setEnteredMobileNumberTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\r\n    formIsValid = true;\r\n  }\r\n  if (\r\n    enteredEmailIsValid &&\r\n    enteredFirstNameIsValid &&\r\n    enteredLastNameIsValid &&\r\n    enteredPasswordIsValid &&\r\n    enteredConfirmPasswordIsValid &&\r\n    enteredMobileNumberIsValid\r\n  ) {\r\n    formIsValid = true;\r\n  }\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLogin) {\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/login\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            email: enteredEmailLogin,\r\n            password: enteredPasswordLogin,\r\n          }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n        setIsLoading(false);\r\n\r\n        if (responseData.status === \"201\") {\r\n          authCtx.login(responseData.token);\r\n          window.sessionStorage.setItem(\"patientId\", responseData.patientId);\r\n          history.replace(\"/patient/detail\");\r\n          console.log(responseData.message);\r\n        } else {\r\n          setIsInValidCredentials(true);\r\n          setEnteredEmailLogin(\"\");\r\n          setEnteredPasswordLogin(\"\");\r\n\r\n          setEnteredEmailLoginTouched(false);\r\n          setEnteredPasswordLoginTouched(false);\r\n          console.log(responseData.message);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      try {\r\n        setIsLoading(true);\r\n\r\n        const response = await fetch(\"http://localhost:5000/signup\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            firstName: enteredFirstName,\r\n            lastName: enteredLastName,\r\n            email: enteredEmail,\r\n            mobileNumber: enteredMobileNumber,\r\n            password: enteredPassword,\r\n            confirmPassword: enteredConfirmPassword,\r\n          }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n        setIsLoading(false);\r\n\r\n        if (\r\n          responseData.status !== \"422\" &&\r\n          enteredPassword === enteredConfirmPassword\r\n        ) {\r\n          authCtx.login(responseData.token);\r\n          //window.sessionStorage.setItem(\"userId\", responseData.userId);\r\n          window.sessionStorage.setItem(\"patientId\", responseData.patientId);\r\n          history.replace(\"/patient/detail\");\r\n          console.log(responseData.message);\r\n        } else if (enteredPassword !== enteredConfirmPassword) {\r\n          setIsPasswordInValid(true);\r\n          console.log(responseData.message);\r\n        } else {\r\n          setIsExsistingUser(true);\r\n          setEnteredEmail(\"\");\r\n          setEnteredFirstName(\"\");\r\n          setEnteredLastName(\"\");\r\n          setEnteredMobileNumber(\"\");\r\n          setEnteredPassword(\"\");\r\n          setEnteredConfirmPassword(\"\");\r\n\r\n          setEnteredConfirmPasswordTouched(false);\r\n          setEnteredPasswordTouched(false);\r\n          setEnteredEmailTouched(false);\r\n          setEnteredFirstNameTouched(false);\r\n          setEnteredLastNameTouched(false);\r\n          setEnteredMobileNumberTouched(false);\r\n          console.log(responseData.message);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.container}>\r\n        <div className={classes.imagebox}>\r\n        <img src={PatientImage} className=\"img-fluid\" alt=\"Phoneimage\" style={{width:\"600px\"}}/>\r\n      </div>\r\n      <div className={classes.loginbox}>\r\n      <Card.ImgOverlay>\r\n        <section className={classes.auth}>\r\n          <h3>{isLogin ? \"PATIENT LOGIN\" : \"SIGN UP\"}</h3>\r\n\r\n          <form onSubmit={formSubmitHandler}>\r\n            {!isLogin && (\r\n              <div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"text\">First Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"fname\"\r\n                    placeholder=\"First Name\"\r\n                    required\r\n                    onChange={firstNameInputChangeHandler}\r\n                    onBlur={firstNameInputBlurHandler}\r\n                    value={enteredFirstName}\r\n                  />\r\n                  {firstNameInputIsInValid && (\r\n                    <div className=\"p-3\">\r\n                      <h6>First Name must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"text\">Last Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"lname\"\r\n                    placeholder=\"Last Name\"\r\n                    required\r\n                    onChange={lastNameInputChangeHandler}\r\n                    onBlur={lastNameInputBlurHandler}\r\n                    value={enteredLastName}\r\n                  />\r\n                  {lastNameInputIsInValid && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Last Name must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"abc@gmail.com\"\r\n                    id=\"email\"\r\n                    required\r\n                    onChange={emailInputChangeHandler}\r\n                    onBlur={emailInputBlurHandler}\r\n                    value={enteredEmail}\r\n                  />\r\n                  {emailInputIsInValid && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Email must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"text\">Mobile Number</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"number\"\r\n                    placeholder=\"10 digit mobile number\"\r\n                    pattern=\"[0-9]{10}\"\r\n                    required\r\n                    onChange={mobileNumberInputChangeHandler}\r\n                    onBlur={mobileNumberInputBlurHandler}\r\n                    value={enteredMobileNumber}\r\n                  />\r\n                  {mobileNumberInputIsInValid && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Mobile Number must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    required\r\n                    minLength=\"6\"\r\n                    onChange={passwordInputChangeHandler}\r\n                    onBlur={passwordInputBlurHandler}\r\n                    value={enteredPassword}\r\n                  />\r\n                  {passwordInputIsInValid && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Password must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"password\">Confirm Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"cpassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    required\r\n                    minLength=\"6\"\r\n                    onChange={confirmPasswordInputChangeHandler}\r\n                    onBlur={confirmPasswordInputBlurHandler}\r\n                    value={enteredConfirmPassword}\r\n                  />\r\n                  {ConfirmPasswordInputIsInValid && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Confirm Password must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {isLogin && (\r\n              <div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    placeholder=\"abc@gmail.com\"\r\n                    required\r\n                    onChange={emailInputChangeHandlerLogin}\r\n                    onBlur={emailInputBlurHandlerLogin}\r\n                    value={enteredEmailLogin}\r\n                  />\r\n                  {emailInputIsInvalidLogin && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Email must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    required\r\n                    onChange={passwordInputChangeHandlerLogin}\r\n                    onBlur={passwordInputBlurHandlerLogin}\r\n                    value={enteredPasswordLogin}\r\n                  />\r\n                  {passwordInputIsInvalidLogin && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Password must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div className={classes.actions}>\r\n              {!isLoading && (\r\n                <button disabled={!formIsValid}>\r\n                  {isLogin ? \"Login\" : \"Create Account\"}\r\n                </button>\r\n              )}\r\n              {isLoading && (\r\n                <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n              )}\r\n              {isLogin && isInValidCredentials && (\r\n                <div className=\"p-3\">\r\n                  <h6>Invalid credentials, could not log you in.</h6>\r\n                </div>\r\n              )}\r\n              {!isLogin && isExsistingUser && (\r\n                <div className=\"p-3\">\r\n                  <h6>User exists already, please login instead.</h6>\r\n                </div>\r\n              )}\r\n              {!isLogin && isPasswordInValid && (\r\n                <div className=\"p-3\">\r\n                  <h6>Password and Confirm Password must be same.</h6>\r\n                </div>\r\n              )}\r\n\r\n              <button\r\n                type=\"button\"\r\n                className={classes.toggle}\r\n                onClick={switchAuthModeHandler}\r\n              >\r\n                {isLogin ? \"Create new account\" : \"Login with existing account\"}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </section>\r\n      </Card.ImgOverlay>\r\n      </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientForm;","D:\\project_work\\frontend\\src\\pages\\DoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Auth\\DoctorForm.js",["236","237","238"],"import React, { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./DoctorForm.module.css\";\r\nimport { Form, Group ,Card} from \"react-bootstrap\";\r\nimport DoctorImage from \"../images/DoctorVector.jpg\";\r\nconst DoctorForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n\r\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\r\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\r\n    useState(false);\r\n\r\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\r\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\r\n    useState(false);\r\n\r\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\r\n  const emailInputIsInvalidLogin =\r\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\r\n\r\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\r\n  const passwordInputIsInvalidLogin =\r\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\r\n\r\n  const emailInputChangeHandlerLogin = (event) => {\r\n    setEnteredEmailLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const emailInputBlurHandlerLogin = () => {\r\n    setEnteredEmailLoginTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandlerLogin = (event) => {\r\n    setEnteredPasswordLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const passwordInputBlurHandlerLogin = () => {\r\n    setEnteredPasswordLoginTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLogin) {\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/doctor/login\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            email: enteredEmailLogin,\r\n            password: enteredPasswordLogin,\r\n          }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n        setIsLoading(false);\r\n\r\n        if (responseData.status === \"201\") {\r\n          authCtx.login(responseData.token);\r\n          window.sessionStorage.setItem(\"doctorId\", responseData.doctorId);\r\n          history.replace({\r\n            pathname: \"/doctor/detail\",\r\n            // doctorId : responseData.doctorDetail._id\r\n          });\r\n          // console.log(responseData.message);\r\n          // console.log(responseData.doctorId);\r\n        } else {\r\n          setIsInValidCredentials(true);\r\n          setEnteredEmailLogin(\"\");\r\n          setEnteredPasswordLogin(\"\");\r\n\r\n          setEnteredEmailLoginTouched(false);\r\n          setEnteredPasswordLoginTouched(false);\r\n          console.log(responseData.message);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.container}>\r\n        <div className={classes.imagebox}>\r\n        <img src={DoctorImage}\r\n        className=\"img-fluid\" alt=\"Phoneimage\" style={{width:\"600px\"}}/>\r\n      </div>\r\n      <div className={classes.loginbox}>\r\n      <Card.ImgOverlay>\r\n    <section className={classes.auth}>\r\n      <h3>DOCTOR LOGIN</h3>\r\n\r\n      <form onSubmit={formSubmitHandler}>\r\n        {isLogin && (\r\n          <div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"abc@gmail.com\"\r\n                required\r\n                onChange={emailInputChangeHandlerLogin}\r\n                onBlur={emailInputBlurHandlerLogin}\r\n                value={enteredEmailLogin}\r\n              />\r\n              {emailInputIsInvalidLogin && (\r\n                <div className=\"p-3\">\r\n                  <h6>Email must not be empty</h6>\r\n               </div>\r\n              )}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                onChange={passwordInputChangeHandlerLogin}\r\n                onBlur={passwordInputBlurHandlerLogin}\r\n                value={enteredPasswordLogin}\r\n              />\r\n              {passwordInputIsInvalidLogin && \r\n              <div className=\"p-3\">\r\n              <h6>Password must not be empty</h6>\r\n              </div>}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className={classes.actions}>\r\n          {!isLoading && <button disabled={!formIsValid}>Login</button>}\r\n          {isLoading && (\r\n            <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n          )}\r\n          {isLogin && isInValidCredentials && (\r\n            <div className=\"p-3\">\r\n              <h6>Invalid credentials, could not log you in.</h6>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </section>\r\n    </Card.ImgOverlay>\r\n    </div>\r\n    </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DoctorForm;","D:\\project_work\\frontend\\src\\components\\Auth\\AdminForm.js",["239","240","241","242"],"import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport RingLoader from \"react-spinners/RingLoader\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AdminForm.module.css\";\nimport { Form, Group, Card } from \"react-bootstrap\";\nimport AdminImage from \"../images/AdminVector.jpg\";\nconst AdminForm = () => {\n  const authCtx = useContext(AuthContext);\n  const history = useHistory();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\n\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\n    useState(false);\n\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\n    useState(false);\n\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\n  const emailInputIsInvalidLogin =\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\n\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\n  const passwordInputIsInvalidLogin =\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\n\n  const emailInputChangeHandlerLogin = (event) => {\n    setEnteredEmailLogin(event.target.value);\n    setIsInValidCredentials(false);\n  };\n\n  const emailInputBlurHandlerLogin = () => {\n    setEnteredEmailLoginTouched(true);\n  };\n\n  const passwordInputChangeHandlerLogin = (event) => {\n    setEnteredPasswordLogin(event.target.value);\n    setIsInValidCredentials(false);\n  };\n\n  const passwordInputBlurHandlerLogin = () => {\n    setEnteredPasswordLoginTouched(true);\n  };\n\n  let formIsValid = false;\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\n    formIsValid = true;\n  }\n\n  const formSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLogin) {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(\"http://localhost:5000/admin/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            email: enteredEmailLogin,\n            password: enteredPasswordLogin,\n          }),\n        });\n\n        const responseData = await response.json();\n        setIsLoading(false);\n\n        if (responseData.status === \"201\") {\n          authCtx.login(responseData.token);\n          window.sessionStorage.setItem(\"adminId\", responseData.adminId);\n          history.replace(\"/admin/home\");\n          console.log(responseData.message);\n        } else {\n          setIsInValidCredentials(true);\n          setEnteredEmailLogin(\"\");\n          setEnteredPasswordLogin(\"\");\n\n          setEnteredEmailLoginTouched(false);\n          setEnteredPasswordLoginTouched(false);\n          console.log(responseData.message);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.container}>\n        <div className={classes.imagebox}>\n          <img src={AdminImage} className=\"img-fluid\" alt=\"Phone image\" style={{ width: \"600px\" }} />\n        </div>\n        <div className={classes.loginbox}>\n          {/* <Card.Img src={AdminImage} alt=\"Card image\" height={661} /> */}\n          <Card.ImgOverlay>\n            <section className={classes.auth}>\n              <h3>ADMIN LOGIN</h3>\n\n              <form onSubmit={formSubmitHandler}>\n                {isLogin && (\n                  <div>\n                    <div className={classes.control}>\n                      <label htmlFor=\"email\">Email</label>\n                      <input\n                        type=\"email\"\n                        id=\"email\"\n                        placeholder=\"abc@gmail.com\"\n                        required\n                        onChange={emailInputChangeHandlerLogin}\n                        onBlur={emailInputBlurHandlerLogin}\n                        value={enteredEmailLogin}\n                      />\n                      {emailInputIsInvalidLogin && (\n                        <div className=\"p-3\">\n                          <h6>Email must not be empty</h6>\n                        </div>\n                      )}\n                    </div>\n                    <div className={classes.control}>\n                      <label htmlFor=\"password\">Password</label>\n                      <input\n                        type=\"password\"\n                        id=\"password\"\n                        placeholder=\"Password\"\n                        required\n                        onChange={passwordInputChangeHandlerLogin}\n                        onBlur={passwordInputBlurHandlerLogin}\n                        value={enteredPasswordLogin}\n                      />\n                      {passwordInputIsInvalidLogin && (\n                        <div className=\"p-3\">\n                          <h6 calssName=\"error\">Password must not be empty</h6>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className={classes.actions}>\n                  {!isLoading && <button disabled={!formIsValid}>Login</button>}\n                  {isLoading && (\n                    <RingLoader color=\"white\" height={80} width={80}></RingLoader>\n                  )}\n                  {isLogin && isInValidCredentials && (\n                    <div className=\"p-3\">\n                      <h6 calssName=\"error\">Invalid credentials, could not log you in.</h6>\n                    </div>\n                  )}\n                </div>\n              </form>\n            </section>\n          </Card.ImgOverlay>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default AdminForm;","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminHomePage.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageDoctorForm.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageStaffPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageStaffForm.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js",[],"D:\\project_work\\frontend\\src\\pages\\MainNavigation.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminMainNavigation.js",[],"D:\\project_work\\frontend\\src\\components\\StartingPage\\AdminStarting.js",[],"D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorHomePage.js",[],"D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorMainNavigation.js",[],"D:\\project_work\\frontend\\src\\components\\StartingPage\\DoctorStarting.js",[],"D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorContactUs.js",[],"D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorAboutUs.js",[],"D:\\project_work\\frontend\\src\\pages\\Doctor\\DoctorDetails.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\PatientAboutUs.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\PatientDetails.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\PatientHomePage.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\PatientContactUs.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\PatientMainNavigation.js",[],"D:\\project_work\\frontend\\src\\components\\StartingPage\\PatientStarting.js",[],"D:\\project_work\\frontend\\src\\pages\\StaffPage.js",[],"D:\\project_work\\frontend\\src\\components\\Auth\\StaffForm.js",["243","244"],"import React, { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./StaffForm.module.css\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport StaffImage from \"../images/StaffVector.jpg\"; \r\n\r\nconst StaffForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n\r\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\r\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\r\n    useState(false);\r\n\r\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\r\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\r\n    useState(false);\r\n\r\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\r\n  const emailInputIsInvalidLogin =\r\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\r\n\r\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\r\n  const passwordInputIsInvalidLogin =\r\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\r\n\r\n  const emailInputChangeHandlerLogin = (event) => {\r\n    setEnteredEmailLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const emailInputBlurHandlerLogin = () => {\r\n    setEnteredEmailLoginTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandlerLogin = (event) => {\r\n    setEnteredPasswordLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const passwordInputBlurHandlerLogin = () => {\r\n    setEnteredPasswordLoginTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLogin) {\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/staff/login\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            email: enteredEmailLogin,\r\n            password: enteredPasswordLogin,\r\n          }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n        setIsLoading(false);\r\n\r\n        if (responseData.status === \"201\") {\r\n          authCtx.login(responseData.token);\r\n          window.sessionStorage.setItem(\"staffId\", responseData.staffId);\r\n          history.replace({\r\n            pathname: \"/staff/home\",\r\n            // doctorId : responseData.doctorDetail._id\r\n          });\r\n          // console.log(responseData.message);\r\n          // console.log(responseData.doctorId);\r\n        } else {\r\n          setIsInValidCredentials(true);\r\n          setEnteredEmailLogin(\"\");\r\n          setEnteredPasswordLogin(\"\");\r\n\r\n          setEnteredEmailLoginTouched(false);\r\n          setEnteredPasswordLoginTouched(false);\r\n          console.log(responseData.message);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.container}>\r\n        <div className={classes.imagebox}>\r\n        <img src={StaffImage} class=\"img-fluid\" alt=\"Phone image\" style={{width:\"600px\"}}/>\r\n      </div>\r\n      {/* <Card.Img src={StaffImage} alt=\"Card image\" height={661} /> */}\r\n      <div className={classes.loginbox}>\r\n      <Card.ImgOverlay>\r\n        <section className={classes.auth}>\r\n          <h3>STAFF LOGIN</h3>\r\n\r\n          <form onSubmit={formSubmitHandler}>\r\n            {isLogin && (\r\n              <div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    placeholder=\"abc@gmail.com\"\r\n                    required\r\n                    onChange={emailInputChangeHandlerLogin}\r\n                    onBlur={emailInputBlurHandlerLogin}\r\n                    value={enteredEmailLogin}\r\n                  />\r\n                  {emailInputIsInvalidLogin && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Email must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    required\r\n                    onChange={passwordInputChangeHandlerLogin}\r\n                    onBlur={passwordInputBlurHandlerLogin}\r\n                    value={enteredPasswordLogin}\r\n                  />\r\n                  {passwordInputIsInvalidLogin && (\r\n                    <div className=\"p-3\">\r\n                      <h6>Password must not be empty</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div className={classes.actions}>\r\n              {!isLoading && <button disabled={!formIsValid}>Login</button>}\r\n              {isLoading && (\r\n                <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n              )}\r\n              {isLogin && isInValidCredentials && (\r\n                <div className=\"p-3\">\r\n                  <h6>Invalid credentials, could not log you in.</h6>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </section>\r\n      </Card.ImgOverlay>\r\n      </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default StaffForm;","D:\\project_work\\frontend\\src\\pages\\Staff\\StaffHomePage.js",[],"D:\\project_work\\frontend\\src\\components\\StartingPage\\StaffStarting.js",[],"D:\\project_work\\frontend\\src\\pages\\Staff\\StaffMainNavigation.js",[],"D:\\project_work\\frontend\\src\\pages\\Staff\\UploadDocument.js",[],"D:\\project_work\\frontend\\src\\pages\\Staff\\StaffManagePatientId.js",[],"D:\\project_work\\frontend\\src\\pages\\Staff\\UploadPDFDocument.js",[],"D:\\project_work\\frontend\\src\\pages\\Footer.js",[],"D:\\project_work\\frontend\\src\\pages\\HomeContactUs.js",[],"D:\\project_work\\frontend\\src\\pages\\HomeAboutUs.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\PatientDocuments.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\SearchDoctor.js",["245","246","247","248"],"import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport PatientMainNavigation from \"./PatientMainNavigation\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst SearchDoctor = () => {\r\n  const [search, setSearch] = useState();\r\n  const [record, setRecord] = useState([]);\r\n\r\n  const loadDoctorDetail = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/doctor/detail\");\r\n      const responseData = await response.json();\r\n\r\n      setRecord(responseData.doctor);\r\n    } catch (err) {\r\n      console.log(\"error\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    search ? searchRecords() : loadDoctorDetail();\r\n  }, [search]);\r\n\r\n  const searchRecords = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/doctor/searchRecord/${search}`\r\n      );\r\n      const responseData = await response.json();\r\n      //   console.log(responseData.doctor);\r\n      setRecord(responseData.doctor);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <PatientMainNavigation></PatientMainNavigation>\r\n      <NavLink to=\"/map\">View On Map</NavLink>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchDoctor;\r\n","D:\\project_work\\frontend\\src\\pages\\Patient\\Map.js",[],"D:\\project_work\\frontend\\src\\pages\\Patient\\UpdateProfile.js",["249","250","251","252"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport PatientImage from \"../../components/images/PatientVector.jpg\";\r\nimport PatientMainNavigation from \"./PatientMainNavigation\";\r\nimport { Form, Group, Card } from \"react-bootstrap\";\r\nimport classes from \"../../components/Auth/PatientForm.module.css\";\r\nconst UpdateProfile = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const patientId = window.sessionStorage.getItem(\"patientId\");\r\n  const [patient, setPatient] = useState(\"\");\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [isExsistingUser, setIsExsistingUser] = useState(false);\r\n\r\n  const [enteredFirstName, setEnteredFirstName] = useState(patient.firstName);\r\n\r\n  const [enteredLastName, setEnteredLastName] = useState(patient.lastName);\r\n\r\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n\r\n  const [enteredMobileNumber, setEnteredMobileNumber] = useState(patient.mobileNumber);\r\n\r\n  const firstNameInputChangeHandler = (event) => {\r\n    setEnteredFirstName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const lastNameInputChangeHandler = (event) => {\r\n    setEnteredLastName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const emailInputChangeHandler = (event) => {\r\n    setEnteredEmail(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const mobileNumberInputChangeHandler = (event) => {\r\n    setEnteredMobileNumber(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const sendRequest = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/detail/${patientId}`\r\n        );\r\n\r\n        const responseData = await response.json();\r\n        const patientDetail = {\r\n          firstName: responseData.patient.firstName,\r\n          lastName: responseData.patient.lastName,\r\n          email: responseData.patient.email,\r\n          mobileNumber: responseData.patient.mobileNumber,\r\n        };\r\n        setPatient(patientDetail);\r\n      } catch (err) {\r\n        console.log(\"error\");\r\n      }\r\n    };\r\n    sendRequest();\r\n  }, [patientId]);\r\n\r\n  const formSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      const response = await fetch(\r\n        `http://localhost:5000/update/${patientId}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            firstName: enteredFirstName,\r\n            lastName: enteredLastName,\r\n            mobileNumber: enteredMobileNumber,\r\n          }),\r\n        }\r\n      );\r\n\r\n      const responseData = await response.json();\r\n      setIsLoading(false);\r\n        // console.lo\r\n      if (responseData.status === \"201\") {\r\n        // authCtx.login(responseData.token);\r\n        //window.sessionStorage.setItem(\"userId\", responseData.userId);\r\n        // window.sessionStorage.setItem(\"patientId\", responseData.patientId);\r\n        history.replace(\"/patient/detail\");\r\n        console.log(responseData.message);\r\n      } else {\r\n        setIsExsistingUser(true);\r\n        setEnteredEmail(\"\");\r\n        setEnteredFirstName(\"\");\r\n        setEnteredLastName(\"\");\r\n        setEnteredMobileNumber(\"\");\r\n\r\n        console.log(responseData.message);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PatientMainNavigation></PatientMainNavigation>\r\n\r\n      <div className={classes.container}>\r\n        <div className={classes.imagebox}>\r\n          <img\r\n            src={PatientImage}\r\n            className=\"img-fluid\"\r\n            alt=\"Phoneimage\"\r\n            style={{ width: \"600px\" }}\r\n          />\r\n        </div>\r\n        <div className={classes.loginbox}>\r\n          <Card.ImgOverlay>\r\n            <section className={classes.auth}>\r\n              <h3>UPDATE INFORMATION</h3>\r\n\r\n              <form onSubmit={formSubmitHandler}>\r\n                <div>\r\n                  <div className={classes.control}>\r\n                    <label htmlFor=\"text\">First Name</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"lname\"\r\n                      required\r\n                      onChange={firstNameInputChangeHandler}\r\n                      defaultValue={patient.firstName}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className={classes.control}>\r\n                    <label htmlFor=\"text\">Last Name</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"lname\"\r\n                      placeholder=\"Last Name\"\r\n                      required\r\n                      onChange={lastNameInputChangeHandler}\r\n                      defaultValue={patient.lastName}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className={classes.control}>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      placeholder=\"abc@gmail.com\"\r\n                      id=\"email\"\r\n                      required\r\n                      onChange={emailInputChangeHandler}\r\n                      defaultValue={patient.email}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className={classes.control}>\r\n                    <label htmlFor=\"text\">Mobile Number</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"number\"\r\n                      placeholder=\"10 digit mobile number\"\r\n                      pattern=\"[0-9]{10}\"\r\n                      required\r\n                      onChange={mobileNumberInputChangeHandler}\r\n                      defaultValue={patient.mobileNumber}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className={classes.actions}>\r\n                  {!isLoading && <button>Update Profile</button>}\r\n                  {isLoading && (\r\n                    <RingLoader\r\n                      color=\"white\"\r\n                      height={80}\r\n                      width={80}\r\n                    ></RingLoader>\r\n                  )}\r\n\r\n                  {isExsistingUser && (\r\n                    <div className=\"p-3\">\r\n                      <h6>User exists already, please login instead.</h6>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </form>\r\n            </section>\r\n          </Card.ImgOverlay>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdateProfile;\r\n","D:\\project_work\\frontend\\src\\pages\\Doctor\\UpdateDoctorProfile.js",["253","254","255"],"D:\\project_work\\frontend\\src\\pages\\Staff\\UpdateStaffProfile.js",["256","257","258"],"D:\\project_work\\frontend\\src\\pages\\Staff\\StaffDetail.js",[],{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","replacedBy":"262"},{"ruleId":"259","replacedBy":"263"},{"ruleId":"261","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":14},{"ruleId":"265","severity":1,"message":"269","line":8,"column":16,"nodeType":"267","messageId":"268","endLine":8,"endColumn":21},{"ruleId":"265","severity":1,"message":"266","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":14},{"ruleId":"265","severity":1,"message":"269","line":6,"column":16,"nodeType":"267","messageId":"268","endLine":6,"endColumn":21},{"ruleId":"265","severity":1,"message":"270","line":12,"column":19,"nodeType":"267","messageId":"268","endLine":12,"endColumn":29},{"ruleId":"265","severity":1,"message":"266","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":14},{"ruleId":"265","severity":1,"message":"269","line":6,"column":16,"nodeType":"267","messageId":"268","endLine":6,"endColumn":21},{"ruleId":"265","severity":1,"message":"270","line":12,"column":19,"nodeType":"267","messageId":"268","endLine":12,"endColumn":29},{"ruleId":"271","severity":1,"message":"272","line":100,"column":11,"nodeType":"273","endLine":100,"endColumn":102},{"ruleId":"265","severity":1,"message":"270","line":13,"column":19,"nodeType":"267","messageId":"268","endLine":13,"endColumn":29},{"ruleId":"271","severity":1,"message":"272","line":105,"column":9,"nodeType":"273","endLine":105,"endColumn":92},{"ruleId":"265","severity":1,"message":"274","line":4,"column":10,"nodeType":"267","messageId":"268","endLine":4,"endColumn":16},{"ruleId":"265","severity":1,"message":"275","line":7,"column":18,"nodeType":"267","messageId":"268","endLine":7,"endColumn":27},{"ruleId":"265","severity":1,"message":"276","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":16},{"ruleId":"277","severity":1,"message":"278","line":22,"column":6,"nodeType":"279","endLine":22,"endColumn":14,"suggestions":"280"},{"ruleId":"265","severity":1,"message":"266","line":7,"column":10,"nodeType":"267","messageId":"268","endLine":7,"endColumn":14},{"ruleId":"265","severity":1,"message":"269","line":7,"column":16,"nodeType":"267","messageId":"268","endLine":7,"endColumn":21},{"ruleId":"265","severity":1,"message":"281","line":10,"column":9,"nodeType":"267","messageId":"268","endLine":10,"endColumn":16},{"ruleId":"265","severity":1,"message":"282","line":24,"column":10,"nodeType":"267","messageId":"268","endLine":24,"endColumn":22},{"ruleId":"265","severity":1,"message":"266","line":7,"column":10,"nodeType":"267","messageId":"268","endLine":7,"endColumn":14},{"ruleId":"265","severity":1,"message":"269","line":7,"column":16,"nodeType":"267","messageId":"268","endLine":7,"endColumn":21},{"ruleId":"265","severity":1,"message":"281","line":12,"column":9,"nodeType":"267","messageId":"268","endLine":12,"endColumn":16},{"ruleId":"265","severity":1,"message":"266","line":7,"column":10,"nodeType":"267","messageId":"268","endLine":7,"endColumn":14},{"ruleId":"265","severity":1,"message":"269","line":7,"column":16,"nodeType":"267","messageId":"268","endLine":7,"endColumn":21},{"ruleId":"265","severity":1,"message":"281","line":12,"column":9,"nodeType":"267","messageId":"268","endLine":12,"endColumn":16},"no-native-reassign",["283"],"no-negated-in-lhs",["284"],["283"],["284"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Group' is defined but never used.","'setIsLogin' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Button' is defined but never used.","'setSearch' is assigned a value but never used.","'record' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchRecords'. Either include it or remove the dependency array.","ArrayExpression",["285"],"'authCtx' is assigned a value but never used.","'enteredEmail' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},"Update the dependencies array to be: [search, searchRecords]",{"range":"288","text":"289"},[733,741],"[search, searchRecords]"]