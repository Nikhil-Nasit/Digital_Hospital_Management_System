[{"D:\\project_work\\frontend\\src\\index.js":"1","D:\\project_work\\frontend\\src\\App.js":"2","D:\\project_work\\frontend\\src\\pages\\HomePage.js":"3","D:\\project_work\\frontend\\src\\components\\Layout\\Layout.js":"4","D:\\project_work\\frontend\\src\\components\\Profile\\UserProfile.js":"5","D:\\project_work\\frontend\\src\\components\\StartingPage\\StartingPageContent.js":"6","D:\\project_work\\frontend\\src\\components\\Layout\\MainNavigation.js":"7","D:\\project_work\\frontend\\src\\components\\Profile\\ProfileForm.js":"8","D:\\project_work\\frontend\\src\\components\\UI\\Slider.js":"9","D:\\project_work\\frontend\\src\\components\\UI\\DataSlider.js":"10","D:\\project_work\\frontend\\src\\store\\auth-context.js":"11","D:\\project_work\\frontend\\src\\pages\\AdminPage.js":"12","D:\\project_work\\frontend\\src\\pages\\PatientPage.js":"13","D:\\project_work\\frontend\\src\\components\\Auth\\PatientForm.js":"14","D:\\project_work\\frontend\\src\\pages\\DoctorPage.js":"15","D:\\project_work\\frontend\\src\\components\\Auth\\DoctorForm.js":"16","D:\\project_work\\frontend\\src\\components\\Auth\\AdminForm.js":"17","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminHomePage.js":"18","D:\\project_work\\frontend\\src\\components\\Admin\\AdminHomePageForm.js":"19","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js":"20","D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageDoctorForm.js":"21","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageStaffPage.js":"22","D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageStaffForm.js":"23","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js":"24","D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js":"25","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js":"26","D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js":"27"},{"size":346,"mtime":1643380325681,"results":"28","hashOfConfig":"29"},{"size":1710,"mtime":1643728792456,"results":"30","hashOfConfig":"29"},{"size":260,"mtime":1643469945876,"results":"31","hashOfConfig":"29"},{"size":246,"mtime":1643466654602,"results":"32","hashOfConfig":"29"},{"size":284,"mtime":1643428810689,"results":"33","hashOfConfig":"29"},{"size":302,"mtime":1643341996580,"results":"34","hashOfConfig":"29"},{"size":1635,"mtime":1643471323546,"results":"35","hashOfConfig":"29"},{"size":533,"mtime":1643378828277,"results":"36","hashOfConfig":"29"},{"size":1283,"mtime":1643341302987,"results":"37","hashOfConfig":"29"},{"size":2409,"mtime":1643341292061,"results":"38","hashOfConfig":"29"},{"size":721,"mtime":1643392254826,"results":"39","hashOfConfig":"29"},{"size":224,"mtime":1643480382711,"results":"40","hashOfConfig":"29"},{"size":246,"mtime":1643469882060,"results":"41","hashOfConfig":"29"},{"size":14287,"mtime":1643788609390,"results":"42","hashOfConfig":"29"},{"size":241,"mtime":1643469917984,"results":"43","hashOfConfig":"29"},{"size":6631,"mtime":1643472725717,"results":"44","hashOfConfig":"29"},{"size":6590,"mtime":1643524450202,"results":"45","hashOfConfig":"29"},{"size":283,"mtime":1643524797889,"results":"46","hashOfConfig":"29"},{"size":651,"mtime":1643526414350,"results":"47","hashOfConfig":"29"},{"size":256,"mtime":1643471923864,"results":"48","hashOfConfig":"29"},{"size":12755,"mtime":1643789277585,"results":"49","hashOfConfig":"29"},{"size":249,"mtime":1643476104370,"results":"50","hashOfConfig":"29"},{"size":11276,"mtime":1643785240176,"results":"51","hashOfConfig":"29"},{"size":256,"mtime":1643526034990,"results":"52","hashOfConfig":"29"},{"size":3157,"mtime":1643818575900,"results":"53","hashOfConfig":"29"},{"size":252,"mtime":1643526068369,"results":"54","hashOfConfig":"29"},{"size":3070,"mtime":1643818423388,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"qn2svh",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\project_work\\frontend\\src\\index.js",[],["114","115"],"D:\\project_work\\frontend\\src\\App.js",[],"D:\\project_work\\frontend\\src\\pages\\HomePage.js",[],"D:\\project_work\\frontend\\src\\components\\Layout\\Layout.js",[],"D:\\project_work\\frontend\\src\\components\\Profile\\UserProfile.js",[],"D:\\project_work\\frontend\\src\\components\\StartingPage\\StartingPageContent.js",[],"D:\\project_work\\frontend\\src\\components\\Layout\\MainNavigation.js",[],"D:\\project_work\\frontend\\src\\components\\Profile\\ProfileForm.js",[],["116","117"],"D:\\project_work\\frontend\\src\\components\\UI\\Slider.js",[],"D:\\project_work\\frontend\\src\\components\\UI\\DataSlider.js",[],"D:\\project_work\\frontend\\src\\store\\auth-context.js",[],"D:\\project_work\\frontend\\src\\pages\\AdminPage.js",[],"D:\\project_work\\frontend\\src\\pages\\PatientPage.js",[],"D:\\project_work\\frontend\\src\\components\\Auth\\PatientForm.js",[],"D:\\project_work\\frontend\\src\\pages\\DoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Auth\\DoctorForm.js",["118","119","120","121"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./AuthForm.module.css\";\r\n\r\nconst DoctorForm = () => {\r\n  // const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n\r\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\r\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\r\n    useState(false);\r\n\r\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\r\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\r\n    useState(false);\r\n\r\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\r\n  const emailInputIsInvalidLogin =\r\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\r\n\r\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\r\n  const passwordInputIsInvalidLogin =\r\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\r\n\r\n  const emailInputChangeHandlerLogin = (event) => {\r\n    setEnteredEmailLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const emailInputBlurHandlerLogin = () => {\r\n    setEnteredEmailLoginTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandlerLogin = (event) => {\r\n    setEnteredPasswordLogin(event.target.value);\r\n    setIsInValidCredentials(false);\r\n  };\r\n\r\n  const passwordInputBlurHandlerLogin = () => {\r\n    setEnteredPasswordLoginTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    console.log(\"working\");\r\n    history.push(\"/\");\r\n    // if (isLogin) {\r\n    //   setIsLoading(true);\r\n\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/login\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         email: enteredEmailLogin,\r\n    //         password: enteredPasswordLogin,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (responseData.status === \"201\") {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else {\r\n    //       setIsInValidCredentials(true);\r\n    //       setEnteredEmailLogin(\"\");\r\n    //       setEnteredPasswordLogin(\"\");\r\n\r\n    //       setEnteredEmailLoginTouched(false);\r\n    //       setEnteredPasswordLoginTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   try {\r\n    //     setIsLoading(true);\r\n\r\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         firstName: enteredFirstName,\r\n    //         lastName: enteredLastName,\r\n    //         email: enteredEmail,\r\n    //         mobileNumber: enteredMobileNumber,\r\n    //         password: enteredPassword,\r\n    //         confirmPassword: enteredConfirmPassword,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (\r\n    //       responseData.status !== \"422\" &&\r\n    //       enteredPassword === enteredConfirmPassword\r\n    //     ) {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\r\n    //       setIsPasswordValid(true);\r\n    //     } else {\r\n    //       setIsExsistingUser(true);\r\n    //       setEnteredEmail(\"\");\r\n    //       setEnteredFirstName(\"\");\r\n    //       setEnteredLastName(\"\");\r\n    //       setEnteredMobileNumber(\"\");\r\n    //       setEnteredPassword(\"\");\r\n    //       setEnteredConfirmPassword(\"\");\r\n\r\n    //       setEnteredConfirmPasswordTouched(false);\r\n    //       setEnteredPasswordTouched(false);\r\n    //       setEnteredEmailTouched(false);\r\n    //       setEnteredFirstNameTouched(false);\r\n    //       setEnteredLastNameTouched(false);\r\n    //       setEnteredMobileNumberTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <section className={classes.auth}>\r\n      <h1>Doctor Login</h1>\r\n\r\n      <form onSubmit={formSubmitHandler}>\r\n        {isLogin && (\r\n          <div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"abc@gmail.com\"\r\n                required\r\n                onChange={emailInputChangeHandlerLogin}\r\n                onBlur={emailInputBlurHandlerLogin}\r\n                value={enteredEmailLogin}\r\n              />\r\n              {emailInputIsInvalidLogin && <h4>Email must not be empty</h4>}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                onChange={passwordInputChangeHandlerLogin}\r\n                onBlur={passwordInputBlurHandlerLogin}\r\n                value={enteredPasswordLogin}\r\n              />\r\n              {passwordInputIsInvalidLogin && (\r\n                <h4>Password must not be empty</h4>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className={classes.actions}>\r\n          {!isLoading && <button disabled={!formIsValid}>Login</button>}\r\n          {isLoading && (\r\n            <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n          )}\r\n          {isLogin && isInValidCredentials && (\r\n            <h4>Invalid credentials, could not log you in.</h4>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DoctorForm;\r\n","D:\\project_work\\frontend\\src\\components\\Auth\\AdminForm.js",["122","123","124","125"],"import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport RingLoader from \"react-spinners/RingLoader\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\n\nconst AdminForm = () => {\n  // const authCtx = useContext(AuthContext);\n  const history = useHistory();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\n\n  const [enteredEmailLogin, setEnteredEmailLogin] = useState(\"\");\n  const [enteredEmailLoginTouched, setEnteredEmailLoginTouched] =\n    useState(false);\n\n  const [enteredPasswordLogin, setEnteredPasswordLogin] = useState(\"\");\n  const [enteredPasswordLoginTouched, setEnteredPasswordLoginTouched] =\n    useState(false);\n\n  const enteredEmailIsValidLogin = enteredEmailLogin.trim() !== \"\";\n  const emailInputIsInvalidLogin =\n    !enteredEmailIsValidLogin && enteredEmailLoginTouched;\n\n  const enteredPasswordIsValidLogin = enteredPasswordLogin.trim() !== \"\";\n  const passwordInputIsInvalidLogin =\n    !enteredPasswordIsValidLogin && enteredPasswordLoginTouched;\n\n  const emailInputChangeHandlerLogin = (event) => {\n    setEnteredEmailLogin(event.target.value);\n    setIsInValidCredentials(false);\n  };\n\n  const emailInputBlurHandlerLogin = () => {\n    setEnteredEmailLoginTouched(true);\n  };\n\n  const passwordInputChangeHandlerLogin = (event) => {\n    setEnteredPasswordLogin(event.target.value);\n    setIsInValidCredentials(false);\n  };\n\n  const passwordInputBlurHandlerLogin = () => {\n    setEnteredPasswordLoginTouched(true);\n  };\n\n  let formIsValid = false;\n  if (enteredEmailIsValidLogin && enteredPasswordIsValidLogin) {\n    formIsValid = true;\n  }\n\n  const formSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    console.log(\"working\");\n    history.push(\"/admin/home\");\n    // if (isLogin) {\n    //   setIsLoading(true);\n\n    //   try {\n    //     const response = await fetch(\"http://localhost:5000/login\", {\n    //       method: \"POST\",\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //       body: JSON.stringify({\n    //         email: enteredEmailLogin,\n    //         password: enteredPasswordLogin,\n    //       }),\n    //     });\n\n    //     const responseData = await response.json();\n    //     setIsLoading(false);\n\n    //     if (responseData.status === \"201\") {\n    //       authCtx.login(responseData.token);\n    //       history.replace(\"/\");\n    //       console.log(responseData.message);\n    //     } else {\n    //       setIsInValidCredentials(true);\n    //       setEnteredEmailLogin(\"\");\n    //       setEnteredPasswordLogin(\"\");\n\n    //       setEnteredEmailLoginTouched(false);\n    //       setEnteredPasswordLoginTouched(false);\n    //       console.log(responseData.message);\n    //     }\n    //   } catch (err) {\n    //     console.log(err);\n    //   }\n    // } else {\n    //   try {\n    //     setIsLoading(true);\n\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\n    //       method: \"POST\",\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //       body: JSON.stringify({\n    //         firstName: enteredFirstName,\n    //         lastName: enteredLastName,\n    //         email: enteredEmail,\n    //         mobileNumber: enteredMobileNumber,\n    //         password: enteredPassword,\n    //         confirmPassword: enteredConfirmPassword,\n    //       }),\n    //     });\n\n    //     const responseData = await response.json();\n    //     setIsLoading(false);\n\n    //     if (\n    //       responseData.status !== \"422\" &&\n    //       enteredPassword === enteredConfirmPassword\n    //     ) {\n    //       authCtx.login(responseData.token);\n    //       history.replace(\"/\");\n    //       console.log(responseData.message);\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\n    //       setIsPasswordValid(true);\n    //     } else {\n    //       setIsExsistingUser(true);\n    //       setEnteredEmail(\"\");\n    //       setEnteredFirstName(\"\");\n    //       setEnteredLastName(\"\");\n    //       setEnteredMobileNumber(\"\");\n    //       setEnteredPassword(\"\");\n    //       setEnteredConfirmPassword(\"\");\n\n    //       setEnteredConfirmPasswordTouched(false);\n    //       setEnteredPasswordTouched(false);\n    //       setEnteredEmailTouched(false);\n    //       setEnteredFirstNameTouched(false);\n    //       setEnteredLastNameTouched(false);\n    //       setEnteredMobileNumberTouched(false);\n    //       console.log(responseData.message);\n    //     }\n    //   } catch (err) {\n    //     console.log(err);\n    //   }\n    // }\n  };\n\n  return (\n    <React.Fragment>\n      <section className={classes.auth}>\n        <h1>Admin Login</h1>\n\n        <form onSubmit={formSubmitHandler}>\n        \n          {isLogin && (\n            <div>\n              <div className={classes.control}>\n                <label htmlFor=\"email\">Email</label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  placeholder=\"abc@gmail.com\"\n                  required\n                  onChange={emailInputChangeHandlerLogin}\n                  onBlur={emailInputBlurHandlerLogin}\n                  value={enteredEmailLogin}\n                />\n                {emailInputIsInvalidLogin && <h4>Email must not be empty</h4>}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  placeholder=\"Password\"\n                  required\n                  onChange={passwordInputChangeHandlerLogin}\n                  onBlur={passwordInputBlurHandlerLogin}\n                  value={enteredPasswordLogin}\n                />\n                {passwordInputIsInvalidLogin && (\n                  <h4>Password must not be empty</h4>\n                )}\n              </div>\n            </div>\n          )}\n\n          <div className={classes.actions}>\n            {!isLoading && <button disabled={!formIsValid}>Login</button>}\n            {isLoading && (\n              <RingLoader color=\"white\" height={80} width={80}></RingLoader>\n            )}\n            {isLogin && isInValidCredentials && (\n              <h4>Invalid credentials, could not log you in.</h4>\n            )}\n          </div>\n        </form>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default AdminForm;\n","D:\\project_work\\frontend\\src\\pages\\Admin\\AdminHomePage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminHomePageForm.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageDoctorForm.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminManageStaffPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminManageStaffForm.js",[],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js",["126"],"D:\\project_work\\frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js",[],"D:\\project_work\\frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js",["127"],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"132"},{"ruleId":"130","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":20,"nodeType":"136","messageId":"137","endLine":1,"endColumn":30},{"ruleId":"134","severity":1,"message":"138","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":19},{"ruleId":"134","severity":1,"message":"139","line":11,"column":19,"nodeType":"136","messageId":"137","endLine":11,"endColumn":29},{"ruleId":"134","severity":1,"message":"140","line":12,"column":21,"nodeType":"136","messageId":"137","endLine":12,"endColumn":33},{"ruleId":"134","severity":1,"message":"135","line":1,"column":27,"nodeType":"136","messageId":"137","endLine":1,"endColumn":37},{"ruleId":"134","severity":1,"message":"138","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":19},{"ruleId":"134","severity":1,"message":"139","line":11,"column":19,"nodeType":"136","messageId":"137","endLine":11,"endColumn":29},{"ruleId":"134","severity":1,"message":"140","line":12,"column":21,"nodeType":"136","messageId":"137","endLine":12,"endColumn":33},{"ruleId":"134","severity":1,"message":"141","line":8,"column":9,"nodeType":"136","messageId":"137","endLine":8,"endColumn":16},{"ruleId":"134","severity":1,"message":"141","line":8,"column":9,"nodeType":"136","messageId":"137","endLine":8,"endColumn":16},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],["142"],["143"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'AuthContext' is defined but never used.","'setIsLogin' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'authCtx' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]